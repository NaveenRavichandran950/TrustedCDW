AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-bucket'

  UploadFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'S3UploadPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'

  UploadFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt UploadFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = event['BucketName']
              files = event['Files']
              
              for file_name, file_content in files.items():
                  s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_content)
              
              return {
                  'statusCode': 200,
                  'body': 'Files uploaded successfully'
              }
      Runtime: 'python3.8'

  UploadFiles:
    Type: 'Custom::S3FileUpload'
    DependsOn: MyS3Bucket
    Properties:
      ServiceToken: !GetAtt UploadFunction.Arn
      BucketName: !Ref MyS3Bucket
      Files:
        index.css: |
          /* table, th, td {
              border: 1px solid black;
          } */
          th, td {
              padding: 5px;
              text-align: center;
          }

          p {
              font-size: 20px;
          }

          #timeframeLength:focus::placeholder {
              color: transparent;
          }
        index.html: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
              <link rel="stylesheet" href="index.css">
              <script src="index.js"></script>
              <title>Cloudwatch Metrics</title>
          </head>
          <body>
              <div class="container">
                  <div class="row">
                      <div class="col-sm m-1">
                          <section style="text-align: center">
                              <p>CloudWatch Metrics</p>
                              <br><br>
                          </section>
                      </div>
                  </div>
                  <div class="row justify-content-center">
                      <div class="col">
                          <form>
                              <div class="form-group">
                              <label for="timeframeLength">Duration:</label>
                              <input type="number" min="1" max="100" onkeypress="return event.charCode >= 48" class="form-control" id="timeframeLength" aria-describedby="timeframeLength" placeholder="2" oninput="enableButton()">
                              </div>
                          </form>
                      </div>
                      <div class="col">
                          <label for="timeframeUnit">Unit of time:</label>
                          <select name="timeframeUnit" id="timeframeUnit" class="custom-select">
                              <option selected>Weeks</option>
                              <option value="minutes">Minutes</option>
                              <option value="hours">Hours</option>
                              <option value="days">Days</option>
                          </select>
                      </div>
                      <div class="col" style="display: flex; justify-content: center; align-items: center;">
                          <button type="button" class="btn btn-secondary btn-block" style="margin-top: 13px;" id="customTimeButton" onClick="submitCustomTimeframe()" disabled>Go</button>
                      </div>
                  </div>
              </div>

              <div class="container">
                  <div class="row justify-content-center" id="sectionResults">
                      <section style="text-align: center" class="row loading">
                  
                      </section>
                  </div>
                  <div class="row">
                      <section class="col" id="results">
                  
                      </section>
                  </div>
              </div>
              
              <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
              <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
              <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
          </body>
          </html>
        index.js: |
          async function initialFetchCloudWatchData() {
              let baseURL = "https://tztqsv9x8f.execute-api.us-east-1.amazonaws.com/testing/yamlcloudwatchtest";
              try {
                  let response = await fetch(baseURL);
                  if (!response.ok) {
                      return {
                          "errorMessage": response,
                          "result": false
                      }
                  } else {
                      let cloudWatchData = await response.json();
                      return {
                          "data": cloudWatchData,
                          "result": true
                      }
                  }
              } catch (err) {
                  return {
                      "errorMessage": err,
                      "result": false
                  }
              }
          }

          async function customTimeFetchCloudWatchData(timeframeLength, timeframeUnit) {
              let baseURL = "https://tztqsv9x8f.execute-api.us-east-1.amazonaws.com/testing/yamlcloudwatchtest";
              let timeframeLengthParam = `/?timeframeLength=${timeframeLength}&`;
              let timeframeUnitParam = `timeframeUnit=${timeframeUnit}`;
              let paramURL = baseURL + timeframeLengthParam + timeframeUnitParam;
              try {
                  let response = await fetch(paramURL);
                      if (!response.ok) {
                          return {
                              "errorMessage": response,
                              "result": false
                          }
                      } else {
                          let cloudWatchData = await response.json();
                          return {
                              "data": cloudWatchData,
                              "result": true
                          }
                      }
                  } catch (err) {
                      return {
                          "errorMessage": err,
                          "result": false
                      }
                  }
          }

          function cleanMetricName(metricName) {
              let cleanMetricName = metricName.replace(/_/g, ' ').split(' ');
              cleanMetricName = cleanMetricName.map(word => word.charAt(0).toUpperCase() + word.slice(1));    
              return cleanMetricName.join(' ');
          }

          function createTable(data) {
              let metricLabel = cleanMetricName(data.Id)

              let table = document.createElement("table");
              let tableRow = document.createElement("tr");
              table.style.margin = "10px";
              let tableHeader = document.createElement("th");
              tableHeader.innerHTML = "Metric Name";
              table.appendChild(tableRow);
              tableRow.appendChild(tableHeader);
              data.Timestamps.forEach(timestamp => {
                  let header = document.createElement("th");
                  header.innerHTML = timestamp;
                  tableRow.appendChild(header);
              })
              let results = document.querySelector("#results");
              results.appendChild(table)

              let dataRow = document.createElement("tr");
              table.appendChild(dataRow);
              let metricLabelRow = document.createElement("td");
              metricLabelRow.innerHTML = metricLabel;
              dataRow.appendChild(metricLabelRow);
              data.Values.forEach(value => {
                  let row = document.createElement("td");
                  row.innerHTML = value;
                  dataRow.appendChild(row);
              })
          }

          function newCreateTable(data) {
              let metricLabel = cleanMetricName(data.Id);
              let tableWrapper = document.createElement("div");
              tableWrapper.setAttribute("class", "table-responsive");
              let table = document.createElement("table");
              table.setAttribute("class", "table table-striped table-hover");
              table.setAttribute("style", "width: 100%");
              let tableRow = document.createElement("tr");
              table.style.margin = "10px";
              let tableHeader = document.createElement("th");
              tableHeader.innerHTML = "Metric Name";
              table.appendChild(tableRow);
              tableRow.appendChild(tableHeader);
              data.Timestamps.forEach(timestamp => {
                  let header = document.createElement("th");
                  header.innerHTML = timestamp;
                  tableRow.appendChild(header);
              })
              let results = document.querySelector("#results");
              results.appendChild(tableWrapper)
              tableWrapper.appendChild(table)

              let dataRow = document.createElement("tr");
              table.appendChild(dataRow);
              let metricLabelRow = document.createElement("td");
              metricLabelRow.innerHTML = metricLabel;
              dataRow.appendChild(metricLabelRow);
              data.Values.forEach(value => {
                  let row = document.createElement("td");
                  row.innerHTML = value;
                  dataRow.appendChild(row);
              })
          }

          function enableButton() {
              let timeField = document.querySelector("#timeframeLength");
              let button = document.querySelector("#customTimeButton");
              button.disabled = timeField.value ? false : true;
          }

          async function submitCustomTimeframe() {
              let timeframeLength = document.querySelector("#timeframeLength").value;
              let timeframeUnit = document.querySelector("#timeframeUnit").value;
              if (!timeframeLength || !timeframeUnit) {
                  return
              }
              let results = await customTimeFetchCloudWatchData(timeframeLength, timeframeUnit);
              if (results.result === true) {
                  results.data.MetricDataResults.forEach(data => {
                      newCreateTable(data);
                  })
              }
          }

          async function processInitialData() {
              let data = await initialFetchCloudWatchData();
              if (data.result === true) {
                  data.data.MetricDataResults.forEach(data => {
                      newCreateTable(data);
                  })
              }
          }
          processInitialData();

Outputs:
  S3BucketName:
    Description: 'Name of the S3 bucket where files are uploaded'
    Value: !Ref MyS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
